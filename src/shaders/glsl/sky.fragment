// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.

#include "fragmentVersionSimple.h"
#include "uniformPerFrameConstants.h"
#include "natural-mystic-utils.h"

varying vec4 skyColor;
varying vec3 worldPos;
varying float cameraDist;

/* Generate a pattern of clouds based on a world position. */
float clouds(vec3 pos) {
    const vec2 resolution = vec2(0.8, 0.8);
    const int octaves = 6;
    const float speed = 0.005;

    vec2 st = pos.xz / resolution;
    st.x *= resolution.x / resolution.y;
    st.y += TIME * speed;

    float result = clamp(fBM(octaves, st * 3.0), 0.0, 1.0);

    /* Workaround for MCPE-39749: the uniform TIME might not be a
     * number. See https://bugs.mojang.com/browse/MCPE-39749
     */
    result = isnan(result) || isinf(result) ? 0.0 : result;
    return result;
}

void main() {
    /* The color of clouds resembles that of the sky, but is more
     * close to that of the fog. This way we will have something like
     * a sunlight-reflected-by-clouds effect (but more
     * lightgray-ish). */
    float brightness = clamp(desaturate(FOG_COLOR.rgb, 1.0).r + 0.1, 0.0, 1.0);
    vec4 cloudColor = mix(skyColor, FOG_COLOR, 0.8);
    cloudColor     = mix(cloudColor, vec4(1.0), brightness);
    cloudColor.rgb = desaturate(cloudColor.rgb, 0.4);

    gl_FragColor = mix(skyColor, cloudColor, clouds(worldPos));
}

// Local Variables:
// mode: glsl
// indent-tabs-mode: nil
// End:
