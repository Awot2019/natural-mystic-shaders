// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.

#include "fragmentVersionCentroid.h"

#if __VERSION__ >= 300
	#ifndef BYPASS_PIXEL_SHADER
		#if defined(TEXEL_AA) && defined(TEXEL_AA_FEATURE)
			_centroid in highp vec2 uv0;
			_centroid in highp vec2 uv1;
		#else
			_centroid in vec2 uv0;
			_centroid in vec2 uv1;
		#endif
	#endif
#else
	#ifndef BYPASS_PIXEL_SHADER
		varying vec2 uv0;
		varying vec2 uv1;
	#endif
#endif

varying vec4 color;

#ifdef FOG
varying vec4 fogColor;
#endif

#include "uniformShaderConstants.h"
#include "uniformPerFrameConstants.h"
#include "util.h"
#include "natural-mystic-color.h"
#include "natural-mystic-config.h"
#include "natural-mystic-light.h"
#include "natural-mystic-hacks.h"

LAYOUT_BINDING(0) uniform sampler2D TEXTURE_0;
LAYOUT_BINDING(1) uniform sampler2D TEXTURE_1;
LAYOUT_BINDING(2) uniform sampler2D TEXTURE_2;

void main()
{
#ifdef BYPASS_PIXEL_SHADER
	gl_FragColor = vec4(0, 0, 0, 0);
	return;
#else 

#if USE_TEXEL_AA
	vec4 diffuse = texture2D_AA(TEXTURE_0, uv0);
#else
	vec4 diffuse = texture2D(TEXTURE_0, uv0);
#endif
	
#ifdef SEASONS_FAR
	diffuse.a = 1.0;
#endif

#if USE_ALPHA_TEST
	#ifdef ALPHA_TO_COVERAGE
	#define ALPHA_THRESHOLD 0.05
	#else
	#define ALPHA_THRESHOLD 0.5
	#endif
	if(diffuse.a < ALPHA_THRESHOLD)
		discard;
#endif
	
vec4 inColor = color;

#if defined(BLEND)
	diffuse.a *= inColor.a;
#endif

#if !defined(ALWAYS_LIT)
//	diffuse *= texture2D( TEXTURE_1, uv1 );
#endif

#ifndef SEASONS
	#if !USE_ALPHA_TEST && !defined(BLEND)
		diffuse.a = inColor.a;
	#endif
	
	diffuse.rgb *= inColor.rgb;
#else
	vec2 uv = inColor.xy;
	diffuse.rgb *= mix(vec3(1.0,1.0,1.0), texture2D( TEXTURE_2, uv).rgb*2.0, inColor.b);
	diffuse.rgb *= inColor.aaa;
	diffuse.a = 1.0;
#endif

	/* Reset the diffused color here to the complete darkness. We are
	 * going to redo all the lightings with our own HDR method. */
	vec3 pigment = diffuse.rgb;
	diffuse.rgb  = vec3(0.0);

	/* Fetch the level of daylight (i.e. the one which darkens at
	 * night) from the light map passed by the upstream. */
	float daylight = texture2D(TEXTURE_1, vec2(0.0, 1.0)).r;
	daylight = smoothstep(0.4, 1.0, daylight);

	/* Calculate the color of the ambient light based on the fog
	 * color. We'll use it at several places. Note that the .a
	 * component denotes the intensity. */
#if defined(FOG)
	vec4 ambient = ambientLight(fogColor);
	if (isNetherFog(fogColor)) {
		/* Increase the ambient light level when in the Nether, or
		 * otherwise it'll be unplayably dark there. */
		ambient.a += 18.0;
	}
	else if (!isRenderDistanceFog(FOG_CONTROL)) {
		/* The existence of fog should increase the intensity of
		 * ambient light (#32)
		 */
		ambient.a *= 1.6;
	}
#else
	vec4 ambient = ambientLight(vec4(0.0));
#endif

	diffuse.rgb = applyAmbientLight(diffuse.rgb, pigment, ambient);
#if defined(FOG)
	/* When it's raining the sunlight shouldn't affect the scene
	 * (#24), but this has a side effect. Shadows appear and disappear
	 * all of sudden (#33).
	 */
	if (isRenderDistanceFog(FOG_CONTROL)) {
		diffuse.rgb = applySunlight(diffuse.rgb, pigment, uv1.y, daylight);
	}
#else
	diffuse.rgb = applySunlight(diffuse.rgb, pigment, uv1.y, daylight);
#endif /* FOG */
	diffuse.rgb = applySkylight(diffuse.rgb, pigment, uv1.y, daylight);
	diffuse.rgb = applyMoonlight(diffuse.rgb, pigment, uv1.y, daylight);
	diffuse.rgb = applyTorchLight(diffuse.rgb, pigment, uv1.x, uv1.y, daylight, TIME);

	/* Light sources should be significantly brighter than normal
	 * objects. */
#if defined(ALWAYS_LIT)
	diffuse.rgb += pigment * vec3(1.0) * 60.0;
#endif

	diffuse.rgb = uncharted2ToneMap(diffuse.rgb, 112.0, 1.0);
	diffuse.rgb = contrastFilter(diffuse.rgb, 1.25);

	/* We can't apply fogs before doing tone mapping, because that
	 * changes the fog color and breaks "render distance fog". */
#ifdef FOG
	/* During a bad weather everything should look dull. We do a
	 * desaturation for that (#6). The reason for the mix() is so fogs
	 * not only reduce saturation but also contrast. Note that we must
	 * not desaturate it too much, as the horizon in the ocean starts
	 * to look bad.
	 */
	diffuse.rgb = mix(
		desaturate(diffuse.rgb, fogColor.a) * ambient.rgb,
		fogColor.rgb,
		fogColor.a);
#endif

//#define SHOW_MATERIAL_COLOR 1
#if defined(SHOW_MATERIAL_COLOR)
	diffuse = color;
#endif

	gl_FragColor = diffuse;
	
#endif // BYPASS_PIXEL_SHADER
}

// Local Variables:
// mode: glsl
// indent-tabs-mode: t
// End:
