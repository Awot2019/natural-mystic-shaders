// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.

#include "fragmentVersionCentroid.h"

#if __VERSION__ >= 300
	#ifndef BYPASS_PIXEL_SHADER
		#if defined(TEXEL_AA) && defined(TEXEL_AA_FEATURE)
			_centroid in highp vec2 uv0;
			_centroid in highp vec2 uv1;
		#else
			_centroid in vec2 uv0;
			_centroid in vec2 uv1;
		#endif
	#endif
#else
	#ifndef BYPASS_PIXEL_SHADER
		varying vec2 uv0;
		varying vec2 uv1;
	#endif
#endif

varying vec4 color;

#ifdef FOG
varying vec4 fogColor;
#endif

#include "uniformShaderConstants.h"
#include "uniformPerFrameConstants.h"
#include "util.h"
#include "natural-mystic-utils.h"

LAYOUT_BINDING(0) uniform sampler2D TEXTURE_0;
LAYOUT_BINDING(1) uniform sampler2D TEXTURE_1;
LAYOUT_BINDING(2) uniform sampler2D TEXTURE_2;

void main()
{
#ifdef BYPASS_PIXEL_SHADER
	gl_FragColor = vec4(0, 0, 0, 0);
	return;
#else 

#if USE_TEXEL_AA
	vec4 diffuse = texture2D_AA(TEXTURE_0, uv0);
#else
	vec4 diffuse = texture2D(TEXTURE_0, uv0);
#endif
	
#ifdef SEASONS_FAR
	diffuse.a = 1.0;
#endif

#if USE_ALPHA_TEST
	#ifdef ALPHA_TO_COVERAGE
	#define ALPHA_THRESHOLD 0.05
	#else
	#define ALPHA_THRESHOLD 0.5
	#endif
	if(diffuse.a < ALPHA_THRESHOLD)
		discard;
#endif
	
vec4 inColor = color;

#if defined(BLEND)
	diffuse.a *= inColor.a;
#endif

#if !defined(ALWAYS_LIT)
	diffuse *= texture2D( TEXTURE_1, uv1 );
#endif

#ifndef SEASONS
	#if !USE_ALPHA_TEST && !defined(BLEND)
		diffuse.a = inColor.a;
	#endif
	
	diffuse.rgb *= inColor.rgb;
#else
	vec2 uv = inColor.xy;
	diffuse.rgb *= mix(vec3(1.0,1.0,1.0), texture2D( TEXTURE_2, uv).rgb*2.0, inColor.b);
	diffuse.rgb *= inColor.aaa;
	diffuse.a = 1.0;
#endif

	/* Fetch the level of daylight (i.e. the one which darkens at
	 * night) from the light map passed by the upstream. */
	float daylight = min(1.0, (texture2D(TEXTURE_1, vec2(0.0, 1.0)).r - 0.5) / 0.5);

	diffuse.rgb = applyAmbientLight(diffuse.rgb);
#if defined(FOG)
	/* we must reduce the amount of shadow in this case, as the
	 * seafloor will get unacceptably dark otherwise. This is because
	 * the terrain underwater is rendered with a fog. */
	diffuse.rgb = applyShadow(diffuse.rgb, uv1.x, uv1.y, daylight, fogColor.a);
#else
	diffuse.rgb = applyShadow(diffuse.rgb, uv1.x, uv1.y, daylight, 1.0);
#endif
	diffuse.rgb = applyTorchColor(diffuse.rgb, uv1.x, uv1.y, daylight, TIME);
	diffuse.rgb = applySunlight(diffuse.rgb, uv1.y, daylight);
	diffuse.rgb = applySkylight(diffuse.rgb, uv1.y, daylight);
	diffuse.rgb = applyMoonlight(diffuse.rgb, uv1.x, uv1.y, daylight);
	diffuse.rgb = contrastFilter(diffuse.rgb, 1.05);
	diffuse.rgb = hdrExposure(diffuse.rgb, 4.0, 3.0);
	diffuse.rgb = uncharted2ToneMap(diffuse.rgb, 4.0);
	//diffuse.rgb = acesFilmicToneMap(diffuse.rgb);

#ifdef FOG
	diffuse.rgb = mix( diffuse.rgb, fogColor.rgb, fogColor.a );
#endif

	gl_FragColor = diffuse;
	
#endif // BYPASS_PIXEL_SHADER
}

// Local Variables:
// mode: glsl
// indent-tabs-mode: t
// End:
